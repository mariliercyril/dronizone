package com.scp.dronizone.fleet;

import com.scp.dronizone.common.entity.Drone;
// import com.scp.dronizone.fleet.mysqldatabase.DroneRepository; // ça c'est quand il est dans common mais ça n'a rien à faire là-bas
import com.scp.dronizone.common.states.DroneBatteryState;
import com.scp.dronizone.fleet.mysqldatabase.DroneRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.server.ResponseStatusException;

import java.util.HashMap;
import java.util.Optional;

@RestController
@RequestMapping(path = "/fleet")
public class FleetController {
    /* @Autowired  // This means to get the bean called userRepository
                // Which is auto-generated by Spring, we will use it to handle the data
        // Nécessite d'être dans le même module maven,
        // il me mettait un message d'erreur lorsque le Repository était dans common (se serait peut-être fixé au lancement)
    private DroneRepository droneRepository; */

    private HashMap<Integer, Drone> fakeDroneRepository = new HashMap<Integer, Drone>();

    /**
     * Récupérer un Drone via son ID
     * todo plutôt pour tester/debug, pour l'US#4 on ne veut QUE le niveau de batterie,
     *  mais je me dis que si un drone EN COURS DE LIVRAISON est en batterie LOW... on veut pas lui faire faire demi-tour
     *
     * @param {int} id
     *  ID du Drone à trouver dans la BD
     *
     * @return {JSON/Drone}
     *  Le Drone, s'il existe, au format JSON
     */
    @GetMapping(path = "/{id}")
    public @ResponseBody Drone getDroneById(@PathVariable("id") int id) {
        System.out.println("Trying to retrieve the Drone with ID: " + id + ", from the DB...");
        /// Version avec DB
        /* Optional<Drone> zeDrone = droneRepository.findById(id);
        if (zeDrone.isPresent())
            return zeDrone.get();
        else
            throw new ResponseStatusException(HttpStatus.NOT_FOUND, "Drone not found"); // */

        /// Version avec HashMap
        Drone zeDrone = fakeDroneRepository.get(id);
        if (zeDrone != null)
            return zeDrone;
        else
            throw new ResponseStatusException(HttpStatus.NOT_FOUND, "Drone #" + id + " not found");

    }

    @GetMapping(path = "/{id}/battery")
    public @ResponseBody DroneBatteryState getDroneBatteryById(@PathVariable("id") int id) {
        /// Version avec DB
        /* Optional<Drone> zeDrone = droneRepository.findById(id);
        if (zeDrone.isPresent())
            return zeDrone.get().getBatteryState();
        else
            throw new ResponseStatusException(HttpStatus.NOT_FOUND, "Drone not found"); // */

        /// Version avec HashMap
        Drone zeDrone = fakeDroneRepository.get(id);
        if (zeDrone != null)
            return zeDrone.getBatteryState();
        else
            throw new ResponseStatusException(HttpStatus.NOT_FOUND, "Drone #" + id + " not found");
    }


    @GetMapping(path = "/all")
    public @ResponseBody Iterable<Drone> getAllDrones() {
        // This returns a JSON or XML with the users
        /*
        return droneRepository.findAll();
         */

        /// Version avec HashMap
        return fakeDroneRepository.values();
    }

}
